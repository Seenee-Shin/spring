<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="boardMapper">

	<!-- Board VO resultMap -->
	<resultMap type="Board" id="boardRm">
		<id property="boardNo" column="BOARD_NO"/> <!-- PK -->
		<result property="boardTitle"   column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="createDate"   column="CREATE_DT" />
		<result property="modifyDate"   column="MODIFY_DT" />
		<result property="readCount"    column="READ_COUNT" />
		<result property="memberNo" 	column="MEMBER_NO" />
		<result property="statusCode"   column="STATUS_CD" />
		<result property="categoryCode" column="CATEGORY_CD" />
		<result property="memberName" 	column="MEMBER_NM" />
		<result property="categoryName" column="CATEGORY_NM" />
		<result property="statusName" 	column="STATUS_NM" />
		
		<collection property="imgList" column="BOARD_NO"
					javaType="java.util.ArrayList" ofType="BoardImage" select="selectBoardImageList"/>
	</resultMap>
	<!-- collection : 순차적으로 select구문을 실행하여 imgList에 담음 
					 0~10(RowBounds수)로 묶어 반환-->
	
	
	
	<!-- 특정 게시글 이미지 정보 조회   -->
	<select id="selectBoardImageList" resultMap="boardImageRm">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_LEVEL	
	</select>
	
	<!-- BoardImage VO  -->
	<resultMap type="BoardImage" id="boardImageRm">
		<id property="imgNo" column="IMG_NO"/>
		<result property="imgPath" column="IMG_PATH"/>
		<result property="imgName" column="IMG_NM"/>
		<result property="imgOriginal" column="IMG_ORIGINAL"/>
		<result property="imgLevel" column="IMG_LEVEL"/>
		<result property="boardNo" column="BOARD_NO"/>
		
		
	</resultMap>
	
	<!-- Category VO resultMap -->
   <resultMap type="Category" id="category_rm">
      <id    property="categoryCode" column="CATEGOY_CD"/>
      <result property="categoryName" column="CATEGORY_NM"/>
   </resultMap>
	
	<!-- 게시글 전제 개수 -->
	<select id="getListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD WHERE STATUS_CD != 4
	</select>
	
	
	<!-- 게시글 목록 조회 
	
	 	 <![CDATA[SQL문 작성]]> : 내부에 작성된 태그문자를 문자자체로 인식시킴
	 	 -> &lt; / &gt; 도 사용가능하나 cdata타입 사용권장
	 -->
	<select id="selectBoardList" resultMap="boardRm">
		<![CDATA[
		SELECT BOARD_NO, BOARD_TITLE, READ_COUNT,
    		CASE WHEN SYSDATE - CREATE_DT < 1
         	THEN TO_CHAR(CREATE_DT, 'HH:MI')     
         	ELSE TO_CHAR(CREATE_DT, 'YYYY-MM-DD')
    		END "CREATE_DT",
   		 MEMBER_NO, MEMBER_NM, STATUS_CD, STATUS_NM, CATEGORY_CD, CATEGORY_NM
		FROM BOARD -- STATUS_CD
		JOIN MEMBER USING(MEMBER_NO) -- STATUS_CD
		JOIN STATUS ON(BOARD.STATUS_CD = STATUS.STATUS_CD)
		JOIN CATEGORY USING(CATEGORY_CD)
		WHERE STATUS_CD != 4
		ORDER BY BOARD_NO DESC
		]]>
	</select>
	
	<!-- 게시글 상세조회 -->
	<select id="selectBoard" resultMap="boardRm">
		  SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT, MEMBER_NO, MEMBER_NM,
		          TO_CHAR(CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"' ) CREATE_DT,
		          TO_CHAR(MODIFY_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"' ) MODIFY_DT,
		          CATEGORY_CD, CATEGORY_NM, READ_COUNT, STATUS_NM
	      FROM BOARD B
	      JOIN MEMBER USING(MEMBER_NO)
	      JOIN STATUS S ON(B.STATUS_CD = S.STATUS_CD)
	      JOIN CATEGORY USING(CATEGORY_CD)
	      WHERE BOARD_NO = #{boardNo}
	      AND STATUS_CD != 4
	</select>
	
	<!-- 조회수 증가  -->
	<update id="increaseReadCount">
		UPDATE BOARD SET 
		READ_COUNT = READ_COUNT+1 
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	
 
   <!-- 게시글 삽입 -->
   <!-- 카테고리 조회 -->
   <!-- 컬럼이 하나였으면 리절트타입쓰면되는데 DB에 컬럼이 두개라서 RESULTmAP 
   그래서 위로 가서 result Map을 만든다-->
   <select id="selectCategory" resultMap="category_rm">
      SELECT * FROM CATEGORY ORDER BY 1
   </select>
   
   <!-- 
   게시글 insert 
   
  	 - useGeneratedKeys : JDBC의 getGeneratedKeys()(: DB 내부적으로 생성한 키(시퀀스)를 받음)메소드를 사용하도록 설정 (기본값 false)
  	 
  	 <selectKey> : insert, update 후 사용된 시퀀스(키) 값을 받환하는 태그 -> insert, update 태그 내에서만 사용가능 
  	 
  	     keyProperty : selectKey구문의 결과가 셋팅될 대상 프로퍼티(필드값).
         keyColumn :  리턴되는 결과셋의 칼럼명은 프로퍼티에 일치한다. 여러개의 칼럼을 사용한다면 칼럼명의 목록은 콤마를 사용해서 구분한다.
         resultType : 결과의 타입. 마이바티스는 이 기능을 제거할 수 있지만 추가하는게 문제가 되지는 않을것이다. 마이바티스는 String을 포함하여 키로 사용될 수 있는 간단한 타입을 허용한다.
         order : BEFORE 또는 AFTER를 셋팅할 수 있다. BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문을 실행한다. AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문을 실행한다. 오라클과 같은 데이터베이스에서는 insert구문 내부에서 일관된 호출형태로 처리한다.
         statementType : 위 내용과 같다. 마이바티스는 Statement, PreparedStatement 그리고 CallableStatement을 매핑하기 위해 STATEMENT, PREPARED 그리고 CALLABLE 구문타입을 지원한다.
         [출처. 마이바티스 공식 홈페이지]
   -->
   <insert id="insertBoard" useGeneratedKeys="true" parameterType="Board">
   	
   	<!-- INSERTrk 실행되기 전 실행할 selectKey -->
   		<selectKey order="BEFORE" resultType="_int" keyProperty="BoardNo"> 
   			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
   		</selectKey>
   		
   		ISNERT INTO BOARD(BOARD_NO, BOARD_TITLE, BOARD_CONTENT, MEMBER_NO, CATEGORY_CD)
   		VALUSE(#{boardNo}, #{boardTitle}, #{boardContent}, #{memberNo}, #{categoryCode})
   </insert>
   
   
</mapper>
