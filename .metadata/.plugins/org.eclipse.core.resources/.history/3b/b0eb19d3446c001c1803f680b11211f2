package edu.kh.fin.member.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

//@RequestMapping : 요청주소 , 전달방식에 따라 연결되는 클래스 또는 메소드를 지정하는 어노테이션 
//					-> class + method에 동시 작성하여 하나의 주소로 해석 가능  

@Controller //프레젠테이션 레이어, 웹앱에 전달된 요청과 응답을 처리하도록 명시 + Bean등록 
@RequestMapping("/member/*") // /fin/member/로 시작하는 모든 요청을 받아 처리 
public class MemberController {
	
	//@RequestMapping("login") // /fin/member/login 메소드 처리
	//@RequestMapping(value = "login" , method = RequestMethod.GET)
	//1.()안에 작성된 매개변수가 한개인 결루 매핑할 요청 주소 
	//2.()안에 작성된 매개변수가 두개 이상인 경우 각 값의 key를 작성하여 분류 
	//	-> method 를 작성하지 않으면 방식 관계없이 모두 처리  	
	
	//1. HttpServletRequest를 이용한 파라미터 전달받기 
//	@RequestMapping(value = "login" , method = RequestMethod.POST)
//	public String login(HttpServletRequest req) {
//		//컨트롤러 메소드에 원하는 객체의 타입을 매개변수로 작성하면 요청/응답 관련 객체를 얻어오거나 새로운 객체를 생성해서 의존성 주입(DI)
//		
//		System.out.println(req.getParameter("memberId"));
//		System.out.println(req.getParameter("memberPw"));
//		
//		//Spring redirect
//		return "redirect:/"; // /fin/로 재요청
//	}
	
	
	
	//2. RequestParam 어노테이션 사용 
	// 메소드 매개변수 앞에 작성 
	// 어노테이션 뒤쪽에 작성된 매개변수에 파라미터 저장
	
	//@RequestParam 속성
	// value : 전달 받은 input 태그의 name 속성 값 (매개변수 1개일때 기본값) 
	// Required : 파라미터 필수로 전달(미작성시 기본값 true) -> 미작성시 400에러 발생
	// 
	@RequestMapping(value = "login" , method = RequestMethod.POST)
	public String login2(@RequestParam("memberId") String id,
						@RequestParam("memberPw") String pw, @RequestParam(value="test", require =false) String t) {
		System.out.println(id);
		System.out.println(pw);
		
		return "redirect:/";
	}

}